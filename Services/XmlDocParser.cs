using SOLTEC.DocuWiki.Models;
using System.Xml.Linq;

namespace SOLTEC.DocuWiki.Services;

/// <summary>
/// Parses XML documentation files into structured objects for HTML generation.
/// </summary>
/// <example>
/// Example usage:
/// <![CDATA[
/// var docClasses = XmlDocParser.Parse("bin/Debug/net8.0/SOLTEC.Core.xml");
/// foreach (var doc in docClasses)
/// {
///     Console.WriteLine(doc.Name + ": " + doc.Summary);
/// }
/// ]]>
/// </example>
public static class XmlDocParser
{
    /// <summary>
    /// Parses the specified XML documentation file into a list of <see cref="DocClass"/> instances.
    /// </summary>
    /// <param name="xmlFilePath">The full path to the XML file generated by the C# compiler.</param>
    /// <returns>A list of structured documentation objects.</returns>
    public static List<DocClass> Parse(string xmlFilePath)
    {
        var _docClasses = new Dictionary<string, DocClass>();
        var _xdoc = XDocument.Load(xmlFilePath);

        var _members = _xdoc.Descendants("member");

        foreach (var _member in _members)
        {
            var _name = _member.Attribute("name")?.Value;

            if (string.IsNullOrEmpty(_name)) 
                continue;

            var _summary = GetSummary(_member);
            var _example = GetExample(_member);
            var _parameters = GetParameters(_member);

            if (_name.StartsWith("T:"))
            {
                var _className = _name[2..];
                _docClasses[_className] = new DocClass
                {
                    Name = _className,
                    Summary = _summary ?? "No summary available.",
                    Properties = [],
                    Methods = []
                };
            }
            else if (_name.StartsWith("P:"))
            {
                var _fullName = _name.Substring(2);
                var _lastDotIndex = _fullName.LastIndexOf(".");
                if (_lastDotIndex < 0) 
                    continue;
                var _className = _fullName[.._lastDotIndex];
                var _propertyName = _fullName[(_lastDotIndex + 1)..];

                if (!_docClasses.ContainsKey(_className)) 
                    continue;
                _docClasses[_className].Properties.Add(new DocMember
                {
                    Name = _propertyName,
                    Summary = _summary ?? "No summary available.",
                    Parameters = _parameters,
                    Example = _example
                });
            }
            else if (_name.StartsWith("M:"))
            {
                var _fullName = _name.Substring(2);
                var _lastDotIndex = _fullName.LastIndexOf(value: ".");
                if (_lastDotIndex < 0) 
                    continue;
                var _className = _fullName[.._lastDotIndex];
                var _methodName = _fullName[(_lastDotIndex + 1)..];

                if (!_docClasses.ContainsKey(_className)) 
                    continue;
                _docClasses[_className].Methods.Add(new DocMember
                {
                    Name = _methodName,
                    Summary = _summary ?? "No summary available.",
                    Parameters = _parameters,
                    Example = _example
                });
            }
        }

        return [.. _docClasses.Values];
    }

    /// <summary>
    /// Extracts the summary from a documentation XML element.
    /// </summary>
    public static string? GetSummary(XElement member)
    {
        return member.Element("summary")?.Value?.Trim();
    }

    /// <summary>
    /// Extracts an example usage block from a documentation XML element.
    /// </summary>
    public static string? GetExample(XElement member)
    {
        return member.Element("example")?.Value?.Trim();
    }

    /// <summary>
    /// Extracts parameter documentation from a documentation XML element.
    /// </summary>
    public static string? GetParameters(XElement member)
    {
        var _params = member.Elements("param")
            .Select(p => $"- **{p.Attribute("name")?.Value}**: {p.Value.Trim()}")
            .ToList();

        return _params.Count > 0 ? string.Join("\n", _params) : null;
    }
}